import { html, render } from 'lit-html';
export { html } from 'lit-html';

export class LitElement extends HTMLElement {
  static get properties() { return this._decorated_properties_ || {}; }

  static get observedAttributes() {
    const props = this.properties;
    let ret = [];
    for (const p in props) {
      ret.push(LitElement._p2a(p));
    }
    return ret;
  }

  static _p2a(prop) { return prop.replace(/([A-Z])/g, '-$1').toLowerCase() };

  constructor() {
    super();
    this.__props = {};
    this.__attrMap = {};
    this.__propMap = {};
    this._$ = {};
    this.attachShadow({ mode: 'open' });
  }

  _processPropeties(props) {
    const ret = [];
    for (const p in props) {
      let v = props[p];
      if (v) {
        const d = { name: p };
        if (typeof v === 'function') {
          d.type = v;
        } else if (typeof v === 'object') {
          d.type = v.type || String;
          if (typeof v.value !== 'undefined') {
            d.value = (typeof v.value === 'function') ? (v.value()) : v.value;
          }
        }
        ret.push(d);
      }
    }
    return ret;
  }

  connectedCallback() {
    this._settingUp = true;
    const props = this._processPropeties(this.constructor.properties);
    for (const p of props) {
      const attr = this._propToAttr(p.name);
      const attrValue = this.getAttribute(attr);
      let value;
      if (attrValue || (attrValue === '')) {
        value = attrValue;
        if (p.type.name === 'Boolean') {
          if (value === null || (typeof value === 'undefined') || (value === 'false') || (value === false)) {
            value = false;
          } else {
            value = true;
          }
        }
      } else if (this.hasOwnProperty(p.name)) {
        value = this[p.name];
      } else {
        value = p.value;
      }
      delete this[p.name];
      this._initProperty(p.name, value);
    }
    this._settingUp = false;
    return this.invalidate();
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if ((!newValue) && (typeof oldValue === 'string' || typeof newValue === 'string')) {
      newValue = "";
      if (newValue === oldValue)
        return;
    }
    this[this.__propMap[name] || name] = newValue;
  }

  template() {
    return html``;
  }

  _propToAttr(prop) {
    if (!this.__attrMap[prop]) {
      const attr = this.constructor._p2a(prop);
      this.__attrMap[prop] = attr;
      this.__propMap[attr] = prop;
    }
    return this.__attrMap[prop];
  }

  _initProperty(prop, value) {
    this.__props[prop] = value;
    Object.defineProperty(this, prop, {
      get() { return this.__props[prop]; },
      set(newValue) {
        this.__props[prop] = newValue;
        if (!this._settingUp) {
          this.invalidate();
        }
      }
    });
  }

  async invalidate() {
    if (!this._needsRender) {
      this._needsRender = true;
      this._needsRender = await false;
      render(this.template(), this.shadowRoot);
    }
  }

  $(id) {
    if (!this._$[id]) {
      let e = this.shadowRoot.querySelector(`#${id}`);
      if (e) {
        this._$[id] = e;
      }
    }
    return this._$[id];
  }

  $$(selector) {
    return this.shadowRoot.querySelector(selector);
  }

  $$All(selector) {
    return this.shadowRoot.querySelectorAll(selector);
  }

  fireEvent(name, detail, bubbles, composed) {
    if (name) {
      const init = {
        bubbles: (typeof bubbles === 'boolean') ? bubbles : true,
        composed: (typeof composed === 'boolean') ? composed : true
      }
      if (detail) {
        init.detail = detail;
      }
      this.dispatchEvent(new CustomEvent(name, init));
    }
  }
}