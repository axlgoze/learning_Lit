{"version":3,"file":"button-base.js","sourceRoot":"","sources":["../src/button-base.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;EAUE;;AAEF,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAkC,MAAM,aAAa,CAAC;AAC7E,OAAO,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAE,UAAU,EAAE,MAAM,oDAAoD,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,kDAAkD,CAAC;AAC7E,OAAO,EAAE,eAAe,EAAE,MAAM,uDAAuD,CAAC;AACxF,OAAO,YAAY,MAAM,sBAAsB,CAAC;AAEhD;IAAA,MAAa,UAAW,SAAQ,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAAtE;;YAMc,cAAS,GAAG,KAAK,CAAC;QAmDhC,CAAC;QAxDU,MAAM,KAAK,MAAM;YACpB,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC3C,CAAC;QAKD,IAAY,OAAO;YACf,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC;QAED,IAAY,QAAQ;YAChB,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;QAED,IAAW,YAAY;YACnB,wBAAwB;YACxB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBAClB,OAAO,IAAI,CAAC;aACf;YACD,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAgB,CAAC;QACnE,CAAC;QAED,IAAc,aAAa;YACvB,MAAM,IAAI,GAAG,IAAI,CAAA;;SAEhB,CAAC;YACF,MAAM,OAAO,GAAG;gBACZ,IAAI,CAAA;0CAC0B,CAAC,IAAI,CAAC,QAAQ;;;sCAGlB,IAAI,CAAC,kBAAkB;;;aAGhD;aACJ,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,OAAO,OAAO,CAAC;aAClB;YACD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5D,OAAO,OAAO,CAAC;QACnB,CAAC;QAES,MAAM;YACZ,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC;gBACpC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;oBACd,EAAE,EAAE,QAAQ;oBACZ,aAAa,EAAE,IAAI,CAAC,aAAa;iBACpC,CAAC;gBACJ,CAAC,CAAC,IAAI,CAAA;mDACiC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;wBAChD,IAAI,CAAC,aAAa;;eAE3B,CAAC;QACZ,CAAC;KACJ;IAnDG;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC;iDACxC;IAmDhC,iBAAC;KAAA;SAzDY,UAAU","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { property, html, TemplateResult, CSSResultArray } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { LikeAnchor } from '@spectrum-web-components/shared/lib/like-anchor.js';\nimport { Focusable } from '@spectrum-web-components/shared/lib/focusable.js';\nimport { ObserveSlotText } from '@spectrum-web-components/shared/lib/observe-slot-text';\nimport buttonStyles from './button-base.css.js';\n\nexport class ButtonBase extends LikeAnchor(ObserveSlotText(Focusable)) {\n    public static get styles(): CSSResultArray {\n        return [...super.styles, buttonStyles];\n    }\n\n    @property({ type: Boolean, reflect: true, attribute: 'icon-right' })\n    protected iconRight = false;\n\n    private get hasIcon(): boolean {\n        return !!this.querySelector('[slot=\"icon\"]');\n    }\n\n    private get hasLabel(): boolean {\n        return this.slotHasContent;\n    }\n\n    public get focusElement(): HTMLElement {\n        /* istanbul ignore if */\n        if (!this.shadowRoot) {\n            return this;\n        }\n        return this.shadowRoot.querySelector('#button') as HTMLElement;\n    }\n\n    protected get buttonContent(): TemplateResult[] {\n        const icon = html`\n            <slot name=\"icon\"></slot>\n        `;\n        const content = [\n            html`\n                <div id=\"label\" ?hidden=${!this.hasLabel}>\n                    <slot\n                        id=\"slot\"\n                        @slotchange=${this.manageObservedSlot}\n                    ></slot>\n                </div>\n            `,\n        ];\n        if (!this.hasIcon) {\n            return content;\n        }\n        this.iconRight ? content.push(icon) : content.unshift(icon);\n        return content;\n    }\n\n    protected render(): TemplateResult {\n        return this.href && this.href.length > 0\n            ? this.renderAnchor({\n                  id: 'button',\n                  anchorContent: this.buttonContent,\n              })\n            : html`\n                  <button id=\"button\" aria-label=${ifDefined(this.label)}>\n                      ${this.buttonContent}\n                  </button>\n              `;\n    }\n}\n"]}