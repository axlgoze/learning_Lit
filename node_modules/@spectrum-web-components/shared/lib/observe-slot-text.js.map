{"version":3,"file":"observe-slot-text.js","sourceRoot":"","sources":["../src/observe-slot-text.ts"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { PropertyValues, UpdatingElement } from 'lit-element';\n\nconst observedSlotElement = Symbol('observedSlotElement');\nconst slotElementObserver = Symbol('slotElementObserver');\nconst startObserving = Symbol('startObserving');\n\ntype Constructor<T = Record<string, unknown>> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    new (...args: any[]): T;\n    prototype: T;\n};\n\nexport interface SlotTextObservingInterface {\n    slotHasContent: boolean;\n    manageObservedSlot(): void;\n}\n\nexport function ObserveSlotText<T extends Constructor<UpdatingElement>>(\n    constructor: T,\n    slotSelector = '#slot'\n): T & Constructor<SlotTextObservingInterface> {\n    return class SlotTextObservingElement extends constructor\n        implements SlotTextObservingInterface {\n        private [observedSlotElement]: HTMLSlotElement | undefined;\n\n        private [slotElementObserver]: MutationObserver;\n\n        public slotHasContent = false;\n\n        public manageObservedSlot(): void {\n            this[observedSlotElement] = (this[observedSlotElement] ||\n                (this.shadowRoot\n                    ? this.shadowRoot.querySelector(slotSelector)\n                    : undefined)) as HTMLSlotElement | undefined;\n            if (!this[observedSlotElement]) {\n                return;\n            }\n            const slot = this[observedSlotElement] as HTMLSlotElement;\n            let assignedNodes = slot.assignedNodes\n                ? slot.assignedNodes()\n                : [...this.childNodes].filter((node) => {\n                      const el = node as HTMLElement;\n                      return !el.hasAttribute('slot');\n                  });\n            assignedNodes = assignedNodes.filter((node) => {\n                if ((node as HTMLElement).tagName) {\n                    return true;\n                }\n                return node.textContent ? node.textContent.trim() : false;\n            });\n            this.slotHasContent = assignedNodes.length > 0;\n            this.requestUpdate();\n        }\n\n        protected firstUpdated(changedProperties: PropertyValues): void {\n            super.firstUpdated(changedProperties);\n            this.manageObservedSlot();\n        }\n\n        private [startObserving](): void {\n            const config = { characterData: true, subtree: true };\n            if (!this[slotElementObserver]) {\n                const callback = (\n                    mutationsList: Array<MutationRecord>\n                ): void => {\n                    for (const mutation of mutationsList) {\n                        /* istanbul ignore else */\n                        if (mutation.type === 'characterData') {\n                            this.manageObservedSlot();\n                        }\n                    }\n                };\n                this[slotElementObserver] = new MutationObserver(callback);\n            }\n            this[slotElementObserver].observe(this, config);\n        }\n\n        public connectedCallback(): void {\n            super.connectedCallback();\n            this[startObserving]();\n        }\n\n        public disconnectedCallback(): void {\n            /* istanbul ignore else */\n            if (this[slotElementObserver]) {\n                this[slotElementObserver].disconnect();\n            }\n            super.disconnectedCallback();\n        }\n    };\n}\n"]}