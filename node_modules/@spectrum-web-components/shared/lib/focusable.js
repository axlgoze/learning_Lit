import { __decorate } from "tslib";
/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { LitElement, property, } from 'lit-element';
import focusableStyles from './focusable.css.js';
import { FocusVisiblePolyfillMixin } from './focus-visible.js';
/**
 * Focusable base class handles tabindex setting into shadowed elements automatically.
 *
 * This implementation is based heavily on the aybolit delegate-focus-mixin at
 * https://github.com/web-padawan/aybolit/blob/master/packages/core/src/mixins/delegate-focus-mixin.js
 */
let Focusable = /** @class */ (() => {
    class Focusable extends FocusVisiblePolyfillMixin(LitElement) {
        constructor() {
            super(...arguments);
            /**
             * Disable this control. It will not receive focus or events
             */
            this.disabled = false;
            /**
             * When this control is rendered, focus it automatically
             */
            this.autofocus = false;
            /**
             * The tab index to apply to this control. See general documentation about
             * the tabindex HTML property
             */
            this.tabIndex = 0;
            this.isShiftTabbing = false;
            this.newTabindex = 0;
            this.oldTabindex = 0;
        }
        static get styles() {
            return [focusableStyles];
        }
        get focusElement() {
            throw new Error('Must implement focusElement getter!');
        }
        focus() {
            if (this.disabled) {
                return;
            }
            this.focusElement.focus();
        }
        blur() {
            this.focusElement.blur();
        }
        manageAutoFocus() {
            if (this.autofocus) {
                /* Trick :focus-visible polyfill into thinking keyboard based focus */
                this.dispatchEvent(new KeyboardEvent('keydown', {
                    code: 'Tab',
                }));
                this.focus();
            }
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.manageAutoFocus();
            this.manageFocusIn();
            this.manageShiftTab();
        }
        manageFocusIn() {
            this.addEventListener('focusin', (event) => {
                if (event.composedPath()[0] === this) {
                    this.handleFocus();
                }
            });
        }
        manageShiftTab() {
            this.addEventListener('keydown', (event) => {
                if (!event.defaultPrevented &&
                    event.shiftKey &&
                    event.code === 'Tab') {
                    this.isShiftTabbing = true;
                    HTMLElement.prototype.focus.apply(this);
                    setTimeout(() => (this.isShiftTabbing = false), 0);
                }
            });
        }
        update(changedProperties) {
            if (changedProperties.has('disabled')) {
                this.handleDisabledChanged(this.disabled, changedProperties.get('disabled'));
            }
            if (changedProperties.has('tabIndex')) {
                // save value of tabindex, as it can be overridden to
                // undefined in case if the element is disabled
                this.newTabindex = this.tabIndex;
                this.handleTabIndexChanged(this.tabIndex);
            }
            super.update(changedProperties);
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('disabled')) {
                this.focusElement.disabled = this.disabled;
                if (this.disabled) {
                    this.blur();
                }
            }
            if (changedProperties.has('tabIndex') &&
                this.newTabindex !== undefined) {
                this.focusElement.tabIndex = this.newTabindex;
                this.newTabindex = undefined;
            }
        }
        handleFocus() {
            if (this.isShiftTabbing) {
                return;
            }
            this.focusElement.focus();
        }
        handleDisabledChanged(disabled, oldDisabled) {
            if (disabled) {
                this.oldTabindex = this.tabIndex;
                this.tabIndex = -1;
                this.setAttribute('aria-disabled', 'true');
            }
            else if (oldDisabled) {
                this.tabIndex = this.oldTabindex;
                this.removeAttribute('aria-disabled');
            }
        }
        handleTabIndexChanged(tabindex) {
            if (this.disabled && tabindex) {
                if (this.tabIndex !== -1) {
                    this.oldTabindex = this.tabIndex;
                }
                this.tabIndex = -1;
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Focusable.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], Focusable.prototype, "autofocus", void 0);
    __decorate([
        property({ type: Number, reflect: true })
    ], Focusable.prototype, "tabIndex", void 0);
    return Focusable;
})();
export { Focusable };
//# sourceMappingURL=focusable.js.map